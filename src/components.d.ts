/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface EfButton {
        "color": 'PRIMARY' | 'SECONDARY';
        "disabled": boolean;
        "icon": string;
        "size": 'LARGE' | 'MEDIUM' | 'SMALL';
        "text": string;
    }
    interface EfCardInfo {
        "image": string;
        "styleTitle": { [key: string]: string };
        "subtitle": string;
        "title": string;
    }
    interface EfCheckbox {
        "checked": boolean;
        "disabled": boolean;
        "size": number;
    }
    interface EfDataTable {
        "data": { [key: string]: string | number }[];
        "headers": { text: string; value: string; slot?: (item: { [key: string]: string | number }) => JSX.Element }[];
    }
    interface EfDropdown {
        "disabled": boolean;
        "errorMessage": string;
        "icon": string;
        "items": { id: string | number; text: string }[];
        "label": string;
        "value": string;
    }
    interface EfInput {
        "appendIcon": string;
        "disabled": boolean;
        "errorMessage": string;
        "label": string;
        "prependIcon": string;
        "type": 'text' | 'password';
        "value": string;
    }
    interface EfModal {
        "modal": boolean;
        "width": string;
    }
    interface EfTabs {
        "titles": { text: string; value: string; icon?: string; slot?: (item: { [key: string]: string | number }) => JSX.Element }[];
    }
}
declare global {
    interface HTMLEfButtonElement extends Components.EfButton, HTMLStencilElement {
    }
    var HTMLEfButtonElement: {
        prototype: HTMLEfButtonElement;
        new (): HTMLEfButtonElement;
    };
    interface HTMLEfCardInfoElement extends Components.EfCardInfo, HTMLStencilElement {
    }
    var HTMLEfCardInfoElement: {
        prototype: HTMLEfCardInfoElement;
        new (): HTMLEfCardInfoElement;
    };
    interface HTMLEfCheckboxElement extends Components.EfCheckbox, HTMLStencilElement {
    }
    var HTMLEfCheckboxElement: {
        prototype: HTMLEfCheckboxElement;
        new (): HTMLEfCheckboxElement;
    };
    interface HTMLEfDataTableElement extends Components.EfDataTable, HTMLStencilElement {
    }
    var HTMLEfDataTableElement: {
        prototype: HTMLEfDataTableElement;
        new (): HTMLEfDataTableElement;
    };
    interface HTMLEfDropdownElement extends Components.EfDropdown, HTMLStencilElement {
    }
    var HTMLEfDropdownElement: {
        prototype: HTMLEfDropdownElement;
        new (): HTMLEfDropdownElement;
    };
    interface HTMLEfInputElement extends Components.EfInput, HTMLStencilElement {
    }
    var HTMLEfInputElement: {
        prototype: HTMLEfInputElement;
        new (): HTMLEfInputElement;
    };
    interface HTMLEfModalElement extends Components.EfModal, HTMLStencilElement {
    }
    var HTMLEfModalElement: {
        prototype: HTMLEfModalElement;
        new (): HTMLEfModalElement;
    };
    interface HTMLEfTabsElement extends Components.EfTabs, HTMLStencilElement {
    }
    var HTMLEfTabsElement: {
        prototype: HTMLEfTabsElement;
        new (): HTMLEfTabsElement;
    };
    interface HTMLElementTagNameMap {
        "ef-button": HTMLEfButtonElement;
        "ef-card-info": HTMLEfCardInfoElement;
        "ef-checkbox": HTMLEfCheckboxElement;
        "ef-data-table": HTMLEfDataTableElement;
        "ef-dropdown": HTMLEfDropdownElement;
        "ef-input": HTMLEfInputElement;
        "ef-modal": HTMLEfModalElement;
        "ef-tabs": HTMLEfTabsElement;
    }
}
declare namespace LocalJSX {
    interface EfButton {
        "color"?: 'PRIMARY' | 'SECONDARY';
        "disabled"?: boolean;
        "icon"?: string;
        "onEvent"?: (event: CustomEvent<any>) => void;
        "size"?: 'LARGE' | 'MEDIUM' | 'SMALL';
        "text"?: string;
    }
    interface EfCardInfo {
        "image"?: string;
        "styleTitle"?: { [key: string]: string };
        "subtitle"?: string;
        "title"?: string;
    }
    interface EfCheckbox {
        "checked"?: boolean;
        "disabled"?: boolean;
        "onEvent"?: (event: CustomEvent<any>) => void;
        "size"?: number;
    }
    interface EfDataTable {
        "data"?: { [key: string]: string | number }[];
        "headers"?: { text: string; value: string; slot?: (item: { [key: string]: string | number }) => JSX.Element }[];
    }
    interface EfDropdown {
        "disabled"?: boolean;
        "errorMessage"?: string;
        "icon"?: string;
        "items"?: { id: string | number; text: string }[];
        "label"?: string;
        "onValueChange"?: (event: CustomEvent<object>) => void;
        "value"?: string;
    }
    interface EfInput {
        "appendIcon"?: string;
        "disabled"?: boolean;
        "errorMessage"?: string;
        "label"?: string;
        "onEvent"?: (event: CustomEvent<string>) => void;
        "prependIcon"?: string;
        "type"?: 'text' | 'password';
        "value"?: string;
    }
    interface EfModal {
        "modal"?: boolean;
        "width"?: string;
    }
    interface EfTabs {
        "titles"?: { text: string; value: string; icon?: string; slot?: (item: { [key: string]: string | number }) => JSX.Element }[];
    }
    interface IntrinsicElements {
        "ef-button": EfButton;
        "ef-card-info": EfCardInfo;
        "ef-checkbox": EfCheckbox;
        "ef-data-table": EfDataTable;
        "ef-dropdown": EfDropdown;
        "ef-input": EfInput;
        "ef-modal": EfModal;
        "ef-tabs": EfTabs;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ef-button": LocalJSX.EfButton & JSXBase.HTMLAttributes<HTMLEfButtonElement>;
            "ef-card-info": LocalJSX.EfCardInfo & JSXBase.HTMLAttributes<HTMLEfCardInfoElement>;
            "ef-checkbox": LocalJSX.EfCheckbox & JSXBase.HTMLAttributes<HTMLEfCheckboxElement>;
            "ef-data-table": LocalJSX.EfDataTable & JSXBase.HTMLAttributes<HTMLEfDataTableElement>;
            "ef-dropdown": LocalJSX.EfDropdown & JSXBase.HTMLAttributes<HTMLEfDropdownElement>;
            "ef-input": LocalJSX.EfInput & JSXBase.HTMLAttributes<HTMLEfInputElement>;
            "ef-modal": LocalJSX.EfModal & JSXBase.HTMLAttributes<HTMLEfModalElement>;
            "ef-tabs": LocalJSX.EfTabs & JSXBase.HTMLAttributes<HTMLEfTabsElement>;
        }
    }
}
